<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20242.24.0910.0334                               -->
<workbook original-version='18.1' source-build='2024.2.3 (20242.24.0910.0334)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelExtractV2.true...ObjectModelExtractV2 />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
    <WorksheetBackgroundTransparency />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='Pick a metric' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Close Price&quot;'>
        <calculation class='tableau' formula='&quot;Close Price&quot;' />
        <members>
          <member value='&quot;Close Price&quot;' />
          <member value='&quot;Volume&quot;' />
          <member value='&quot;Low&quot;' />
          <member value='&quot;High&quot;' />
        </members>
      </column>
      <column caption='Start date' datatype='date' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='#2015-08-22#'>
        <calculation class='tableau' formula='#2015-08-22#' />
        <range max='#2016-12-30#' min='#2010-01-04#' />
      </column>
      <column caption='End date' datatype='date' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='#2014-03-16#'>
        <calculation class='tableau' formula='#2014-03-16#' />
        <range max='#2016-12-30#' min='#2010-01-04#' />
      </column>
    </datasource>
    <datasource caption='Stockcompanies.csv+ (Multiple Connections)' inline='true' name='federated.1r5vhes128chte10doul40fm7qtp' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Stockcompanies' name='textscan.0wte1zg0gcyck019ex1eq082e847'>
            <connection class='textscan' directory='C:/Users/user/Downloads' filename='Stockcompanies.csv' password='' server='' />
          </named-connection>
          <named-connection caption='StockPrices' name='textscan.0ldx92g0inzhoi1cmx8rm1re2ppz'>
            <connection class='textscan' directory='C:/Users/user/Downloads' filename='StockPrices.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.0ldx92g0inzhoi1cmx8rm1re2ppz' name='StockPrices.csv' table='[StockPrices#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='date' name='date' ordinal='0' />
            <column datatype='string' name='symbol' ordinal='1' />
            <column datatype='real' name='open' ordinal='2' />
            <column datatype='real' name='close' ordinal='3' />
            <column datatype='real' name='low' ordinal='4' />
            <column datatype='real' name='high' ordinal='5' />
            <column datatype='integer' name='volume' ordinal='6' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
          <relation connection='textscan.0wte1zg0gcyck019ex1eq082e847' name='Stockcompanies.csv' table='[Stockcompanies#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='Ticker_symbol' ordinal='0' />
              <column datatype='string' name='Security' ordinal='1' />
              <column datatype='string' name='Sector' ordinal='2' />
              <column datatype='string' name='Sub_Industry' ordinal='3' />
              <column datatype='string' name='Headquarter' ordinal='4' />
            </columns>
          </relation>
          <relation connection='textscan.0ldx92g0inzhoi1cmx8rm1re2ppz' name='StockPrices.csv' table='[StockPrices#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='date' name='date' ordinal='0' />
              <column datatype='string' name='symbol' ordinal='1' />
              <column datatype='real' name='open' ordinal='2' />
              <column datatype='real' name='close' ordinal='3' />
              <column datatype='real' name='low' ordinal='4' />
              <column datatype='real' name='high' ordinal='5' />
              <column datatype='integer' name='volume' ordinal='6' />
            </columns>
          </relation>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Stockcompanies.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[StockPrices.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ticker_symbol</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Ticker_symbol]</local-name>
            <parent-name>[Stockcompanies.csv]</parent-name>
            <remote-alias>Ticker_symbol</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Security</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Security]</local-name>
            <parent-name>[Stockcompanies.csv]</parent-name>
            <remote-alias>Security</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sector</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Sector]</local-name>
            <parent-name>[Stockcompanies.csv]</parent-name>
            <remote-alias>Sector</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub_Industry</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Sub_Industry]</local-name>
            <parent-name>[Stockcompanies.csv]</parent-name>
            <remote-alias>Sub_Industry</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Headquarter</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Headquarter]</local-name>
            <parent-name>[Stockcompanies.csv]</parent-name>
            <remote-alias>Headquarter</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[StockPrices.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>5</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>symbol</remote-name>
            <remote-type>129</remote-type>
            <local-name>[symbol]</local-name>
            <parent-name>[StockPrices.csv]</parent-name>
            <remote-alias>symbol</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>open</remote-name>
            <remote-type>5</remote-type>
            <local-name>[open]</local-name>
            <parent-name>[StockPrices.csv]</parent-name>
            <remote-alias>open</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>close</remote-name>
            <remote-type>5</remote-type>
            <local-name>[close]</local-name>
            <parent-name>[StockPrices.csv]</parent-name>
            <remote-alias>close</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>low</remote-name>
            <remote-type>5</remote-type>
            <local-name>[low]</local-name>
            <parent-name>[StockPrices.csv]</parent-name>
            <remote-alias>low</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>high</remote-name>
            <remote-type>5</remote-type>
            <local-name>[high]</local-name>
            <parent-name>[StockPrices.csv]</parent-name>
            <remote-alias>high</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>volume</remote-name>
            <remote-type>20</remote-type>
            <local-name>[volume]</local-name>
            <parent-name>[StockPrices.csv]</parent-name>
            <remote-alias>volume</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Selected Metric' datatype='real' name='[Calculation_1496039543189073920]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE [Parameters].[Parameter 1]&#13;&#10;    WHEN &quot;Close Price&quot; THEN [close]&#13;&#10;    WHEN &quot;Volume&quot; THEN [volume]&#13;&#10;    WHEN &quot;High&quot; THEN [high]&#13;&#10;    WHEN &quot;Low&quot; THEN [low]&#13;&#10;END' />
      </column>
      <column caption='Average Closing Price' datatype='real' name='[Calculation_1496039543192064001]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='AVG([close])' />
      </column>
      <column caption='Price Change' datatype='real' name='[Calculation_1496039543207063554]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='([close] - [open]) / [open] * 100' />
      </column>
      <column caption='Total Volume' datatype='integer' name='[Calculation_1496039543209070597]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([volume])' />
      </column>
      <column aggregation='Sum' caption='Period' datatype='integer' name='[Calculation_517351049229258753]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='IF [date]&gt;= [Parameters].[Parameter 2] AND [date]&lt;= [Parameters].[Parameter 3] THEN 1 ELSE 0&#13;&#10;END' />
      </column>
      <column datatype='string' name='[Headquarter]' role='dimension' semantic-role='[County].[Name]' type='nominal' />
      <column datatype='string' name='[Sector]' role='dimension' type='nominal' />
      <column caption='Sub Industry' datatype='string' name='[Sub_Industry]' role='dimension' semantic-role='' type='nominal' />
      <column caption='Ticker symbol' datatype='string' name='[Ticker_symbol]' role='dimension' type='nominal' />
      <_.fcp.ObjectModelTableType.true...column caption='StockPrices.csv' datatype='table' name='[__tableau_internal_object_id__].[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='Stockcompanies.csv' datatype='table' name='[__tableau_internal_object_id__].[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]' role='measure' type='quantitative' />
      <column caption='Close' datatype='real' name='[close]' role='measure' type='quantitative' />
      <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
      <column caption='High' datatype='real' name='[high]' role='measure' type='quantitative' />
      <column caption='Low' datatype='real' name='[low]' role='measure' type='quantitative' />
      <column caption='Open' datatype='real' name='[open]' role='measure' type='quantitative' />
      <column caption='Symbol' datatype='string' name='[symbol]' role='dimension' type='nominal' />
      <column caption='Volume' datatype='integer' name='[volume]' role='measure' type='quantitative' />
      <column-instance column='[Sector]' derivation='Attribute' name='[attr:Sector:nk]' pivot='key' type='nominal' />
      <column-instance column='[close]' derivation='Avg' name='[avg:close:qk]' pivot='key' type='quantitative' />
      <column-instance column='[high]' derivation='Avg' name='[avg:high:qk]' pivot='key' type='quantitative' />
      <column-instance column='[low]' derivation='Avg' name='[avg:low:qk]' pivot='key' type='quantitative' />
      <column-instance column='[open]' derivation='Avg' name='[avg:open:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sector]' derivation='None' name='[none:Sector:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1496039543207063554]' derivation='Sum' name='[sum:Calculation_1496039543207063554:qk]' pivot='key' type='quantitative' />
      <column-instance column='[close]' derivation='Sum' name='[sum:close:qk]' pivot='key' type='quantitative' />
      <column-instance column='[high]' derivation='Sum' name='[sum:high:qk]' pivot='key' type='quantitative' />
      <column-instance column='[low]' derivation='Sum' name='[sum:low:qk]' pivot='key' type='quantitative' />
      <column-instance column='[open]' derivation='Sum' name='[sum:open:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_1496039543209070597]' derivation='User' name='[usr:Calculation_1496039543209070597:ok]' pivot='key' type='ordinal' />
      <extract _.fcp.ObjectModelExtractV2.true...object-id='' _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/user/AppData/Local/Temp/TableauTemp/#TableauTemp_1rxody81d2aohu11c0lee0xnijbl.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='01/31/2025 05:10:09 AM' username='tableau_internal_user'>
          <_.fcp.ObjectModelEncapsulateLegacy.false...relation name='StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17' table='[Extract].[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]' type='table' />
          <_.fcp.ObjectModelEncapsulateLegacy.true...relation type='collection'>
            <relation name='Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291' table='[Extract].[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]' type='table' />
            <relation name='StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17' table='[Extract].[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]' type='table' />
          </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>Ticker_symbol</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Ticker_symbol]</local-name>
              <parent-name>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</parent-name>
              <remote-alias>Ticker_symbol</remote-alias>
              <ordinal>0</ordinal>
              <family>Stockcompanies.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>505</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Security</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Security]</local-name>
              <parent-name>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</parent-name>
              <remote-alias>Security</remote-alias>
              <ordinal>1</ordinal>
              <family>Stockcompanies.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>504</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sector</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Sector]</local-name>
              <parent-name>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</parent-name>
              <remote-alias>Sector</remote-alias>
              <ordinal>2</ordinal>
              <family>Stockcompanies.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>11</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Sub_Industry</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Sub_Industry]</local-name>
              <parent-name>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</parent-name>
              <remote-alias>Sub_Industry</remote-alias>
              <ordinal>3</ordinal>
              <family>Stockcompanies.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>124</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>Headquarter</remote-name>
              <remote-type>129</remote-type>
              <local-name>[Headquarter]</local-name>
              <parent-name>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</parent-name>
              <remote-alias>Headquarter</remote-alias>
              <ordinal>4</ordinal>
              <family>Stockcompanies.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>264</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date</remote-name>
              <remote-type>133</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</parent-name>
              <remote-alias>date</remote-alias>
              <ordinal>5</ordinal>
              <family>StockPrices.csv</family>
              <local-type>date</local-type>
              <aggregation>Year</aggregation>
              <approx-count>6133</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>symbol</remote-name>
              <remote-type>129</remote-type>
              <local-name>[symbol]</local-name>
              <parent-name>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</parent-name>
              <remote-alias>symbol</remote-alias>
              <ordinal>6</ordinal>
              <family>StockPrices.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>588</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>open</remote-name>
              <remote-type>5</remote-type>
              <local-name>[open]</local-name>
              <parent-name>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</parent-name>
              <remote-alias>open</remote-alias>
              <ordinal>7</ordinal>
              <family>StockPrices.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>83953</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>close</remote-name>
              <remote-type>5</remote-type>
              <local-name>[close]</local-name>
              <parent-name>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</parent-name>
              <remote-alias>close</remote-alias>
              <ordinal>8</ordinal>
              <family>StockPrices.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>85269</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>low</remote-name>
              <remote-type>5</remote-type>
              <local-name>[low]</local-name>
              <parent-name>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</parent-name>
              <remote-alias>low</remote-alias>
              <ordinal>9</ordinal>
              <family>StockPrices.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>89441</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>high</remote-name>
              <remote-type>5</remote-type>
              <local-name>[high]</local-name>
              <parent-name>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</parent-name>
              <remote-alias>high</remote-alias>
              <ordinal>10</ordinal>
              <family>StockPrices.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>91371</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>volume</remote-name>
              <remote-type>20</remote-type>
              <local-name>[volume]</local-name>
              <parent-name>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</parent-name>
              <remote-alias>volume</remote-alias>
              <ordinal>11</ordinal>
              <family>StockPrices.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>228922</approx-count>
              <contains-null>true</contains-null>
              <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' _.fcp.SchemaViewerObjectModel.true...common-percentage='0.875796' _.fcp.SchemaViewerObjectModel.true...user-set-layout-v2='true' dim-ordering='alphabetic' measure-ordering='alphabetic' parameter-percentage='0.124204' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[attr:Sector:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Real Estate&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Consumer Discretionary&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Consumer Staples&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Health Care&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Telecommunications Services&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Industrials&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Information Technology&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Utilities&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Materials&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Energy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Financials&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[usr:Calculation_1496039543209070597:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>534687993500</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>674426811700</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>592049461500</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>847059127000</bucket>
            </map>
            <map to='#e15759'>
              <bucket>585969207800</bucket>
            </map>
            <map to='#edc948'>
              <bucket>812890458300</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>562607386600</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>4609690446400</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:close:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[sum:close:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:open:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[sum:open:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:low:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[sum:low:qk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[sum:Calculation_1496039543207063554:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:high:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[sum:high:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Sector:nk]' palette='blue_teal_10_0' type='palette'>
            <map to='#2c5985'>
              <bucket>&quot;Utilities&quot;</bucket>
            </map>
            <map to='#2f6690'>
              <bucket>&quot;Telecommunications Services&quot;</bucket>
            </map>
            <map to='#32759a'>
              <bucket>&quot;Real Estate&quot;</bucket>
            </map>
            <map to='#3484a5'>
              <bucket>&quot;Materials&quot;</bucket>
            </map>
            <map to='#3992b0'>
              <bucket>&quot;Information Technology&quot;</bucket>
            </map>
            <map to='#45a2b9'>
              <bucket>&quot;Industrials&quot;</bucket>
            </map>
            <map to='#5eafc0'>
              <bucket>&quot;Health Care&quot;</bucket>
            </map>
            <map to='#75bcc7'>
              <bucket>&quot;Financials&quot;</bucket>
            </map>
            <map to='#8cc9cd'>
              <bucket>&quot;Energy&quot;</bucket>
            </map>
            <map to='#a3d6d2'>
              <bucket>&quot;Consumer Staples&quot;</bucket>
            </map>
            <map to='#bce4d8'>
              <bucket>&quot;Consumer Discretionary&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Uzbekistan&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Pick a metric' datatype='string' name='[Parameter 1]' param-domain-type='list' role='measure' type='nominal' value='&quot;Close Price&quot;'>
          <calculation class='tableau' formula='&quot;Close Price&quot;' />
        </column>
        <column caption='Start date' datatype='date' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='#2015-08-22#'>
          <calculation class='tableau' formula='#2015-08-22#' />
          <range max='#2016-12-30#' min='#2010-01-04#' />
        </column>
        <column caption='End date' datatype='date' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='#2014-03-16#'>
          <calculation class='tableau' formula='#2014-03-16#' />
          <range max='#2016-12-30#' min='#2010-01-04#' />
        </column>
      </datasource-dependencies>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='StockPrices.csv' id='StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17'>
            <properties context=''>
              <relation connection='textscan.0ldx92g0inzhoi1cmx8rm1re2ppz' name='StockPrices.csv' table='[StockPrices#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='date' name='date' ordinal='0' />
                  <column datatype='string' name='symbol' ordinal='1' />
                  <column datatype='real' name='open' ordinal='2' />
                  <column datatype='real' name='close' ordinal='3' />
                  <column datatype='real' name='low' ordinal='4' />
                  <column datatype='real' name='high' ordinal='5' />
                  <column datatype='integer' name='volume' ordinal='6' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17' table='[Extract].[StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17]' type='table' />
            </properties>
          </object>
          <object caption='Stockcompanies.csv' id='Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291'>
            <properties context=''>
              <relation connection='textscan.0wte1zg0gcyck019ex1eq082e847' name='Stockcompanies.csv' table='[Stockcompanies#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='Ticker_symbol' ordinal='0' />
                  <column datatype='string' name='Security' ordinal='1' />
                  <column datatype='string' name='Sector' ordinal='2' />
                  <column datatype='string' name='Sub_Industry' ordinal='3' />
                  <column datatype='string' name='Headquarter' ordinal='4' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291' table='[Extract].[Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[Ticker_symbol]' />
              <expression op='[symbol]' />
            </expression>
            <first-end-point object-id='Stockcompanies.csv_ED7DE02D63C04065B8702C2E2F1A0291' />
            <second-end-point object-id='StockPrices.csv_39F6377CA5E14889BCA39BD6A839EB17' />
          </relationship>
        </relationships>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='price'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#000000' fontname='Tableau Book' fontsize='18'>Stock Price Trends </run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Stockcompanies.csv+ (Multiple Connections)' name='federated.1r5vhes128chte10doul40fm7qtp' />
          </datasources>
          <datasource-dependencies datasource='federated.1r5vhes128chte10doul40fm7qtp'>
            <column caption='Average Closing Price' datatype='real' name='[Calculation_1496039543192064001]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='AVG([close])' />
            </column>
            <column datatype='string' name='[Sector]' role='dimension' type='nominal' />
            <column caption='Close' datatype='real' name='[close]' role='measure' type='quantitative' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[Sector]' derivation='None' name='[none:Sector:nk]' pivot='key' type='nominal' />
            <column-instance column='[date]' derivation='None' name='[none:date:qk]' pivot='key' type='quantitative' />
            <column-instance column='[symbol]' derivation='None' name='[none:symbol:nk]' pivot='key' type='nominal' />
            <column caption='Symbol' datatype='string' name='[symbol]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1496039543192064001]' derivation='User' name='[usr:Calculation_1496039543192064001:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]'>
            <groupfilter function='level-members' level='[none:Sector:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='quantitative' column='[federated.1r5vhes128chte10doul40fm7qtp].[none:date:qk]' included-values='in-range'>
            <min>#2010-01-04#</min>
            <max>#2016-12-30#</max>
          </filter>
          <filter class='categorical' column='[federated.1r5vhes128chte10doul40fm7qtp].[none:symbol:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;A&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AAL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AAP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AAPL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ABBV&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ABC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ABT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ACN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ADBE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ADI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ADM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ADP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ADS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ADSK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AEE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AEP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AES&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AET&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AFL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AGN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AIG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AIV&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AIZ&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AJG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AKAM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ALB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ALK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ALL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ALLE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ALXN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AMAT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AME&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AMG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AMGN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AMP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AMT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AMZN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ANTM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AON&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;APA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;APC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;APD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;APH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ARNC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ATVI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AVB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AVGO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AVY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AWK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AXP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AYI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;AZO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BAC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BAX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BBBY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BBT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BBY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BCR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BDX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BEN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BHI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BIIB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BLK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BLL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BMY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BSX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BWA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;BXP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;C&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CAG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CAH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CAT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CBG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CBS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CCI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CCL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CELG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CERN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CF&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CFG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CHD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CHK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CHRW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CHTR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CINF&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CLX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CMA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CMCSA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CME&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CMG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CMI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CMS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CNC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CNP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;COF&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;COG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;COH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;COL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;COO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;COP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;COST&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;COTY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CPB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CRM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CSCO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CSRA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CSX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CTAS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CTL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CTSH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CTXS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CVS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CVX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;CXO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;D&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DAL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DFS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DGX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DHI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DHR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DIS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DISCA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DISCK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DLPH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DLR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DLTR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DNB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DOV&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DOW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DPS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DRI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DTE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DUK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DVA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;DVN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EBAY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ECL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ED&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EFX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EIX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EMN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EMR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ENDP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EOG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EQIX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EQR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EQT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ES&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ESRX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ESS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ETFC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ETN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ETR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EVHC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EXC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EXPD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EXPE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;EXR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;F&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FAST&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FBHS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FCX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FDX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FFIV&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FIS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FISV&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FITB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FLIR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FLR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FLS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FMC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FOX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FOXA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FRT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FSLR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FTI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FTR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;FTV&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GGP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GILD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GIS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GLW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GOOG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GOOGL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GPC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GPN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GPS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GRMN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;GWW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HAL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HAR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HAS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HBAN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HBI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HCA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HCN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HCP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HES&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HIG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HOG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HOLX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HON&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HPE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HPQ&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HRB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HRL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HRS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HSIC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HST&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HSY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;HUM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;IBM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ICE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;IDXX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;IFF&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ILMN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;INTC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;INTU&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;IP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;IPG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;IR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;IRM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ISRG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ITW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;IVZ&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;JBHT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;JCI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;JEC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;JNJ&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;JNPR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;JPM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;JWN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;K&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KEY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KHC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KIM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KLAC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KMB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KMI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KMX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KORS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KSS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;KSU&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;L&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LEG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LEN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LKQ&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LLL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LLTC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LLY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LMT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LNC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LNT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LOW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LRCX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LUK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LUV&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LVLT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;LYB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;M&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MAA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MAC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MAR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MAS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MAT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MCD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MCHP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MCK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MCO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MDLZ&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MDT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MET&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MHK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MJN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MKC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MLM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MMC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MMM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MNK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MNST&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MON&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MOS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MPC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MRK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MRO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MSFT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MSI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MTB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MTD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MU&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MUR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;MYL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NAVI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NBL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NDAQ&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NEE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NEM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NFLX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NFX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NKE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NLSN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NOC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NOV&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NRG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NSC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NTAP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NTRS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NUE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NVDA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NWL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NWS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;NWSA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;O&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;OKE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;OMC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ORCL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ORLY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;OXY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PAYX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PBCT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PBI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PCAR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PCG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PCLN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PDCO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PEG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PEP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PFE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PFG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PGR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PHM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PKI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PLD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PNC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PNR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PNW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PPG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PPL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PRGO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PRU&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PSA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PSX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PVH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PWR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PXD&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;PYPL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;QCOM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;QRVO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;R&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RAI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RCL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;REGN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RF&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RHI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RHT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RIG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ROK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ROP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ROST&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RRC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RSG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;RTN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SBUX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SCG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SCHW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SEE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SHW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SIG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SJM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SLB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SLG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SNA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SNI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SPG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SPGI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SPLS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SRCL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SRE&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;STI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;STT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;STX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;STZ&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SWK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SWKS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SWN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SYF&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SYK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SYMC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;SYY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;T&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TAP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TDC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TDG&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TEL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TGNA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TGT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TIF&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TJX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TMK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TMO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TRIP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TROW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TRV&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TSCO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TSN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TSO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TSS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TWX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TXN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;TXT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;UAA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;UAL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;UDR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;UHS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ULTA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;UNH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;UNM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;UNP&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;UPS&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;URBN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;URI&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;USB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;UTX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;V&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VAR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VFC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VIAB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VLO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VMC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VNO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VRSK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VRSN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VRTX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VTR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;VZ&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WAT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WBA&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WDC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WEC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WFC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WFM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WHR&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WLTW&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WMB&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WMT&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WRK&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WU&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WYN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;WYNN&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;XEC&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;XEL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;XL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;XLNX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;XOM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;XRAY&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;XRX&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;XYL&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;YHOO&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;YUM&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ZBH&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ZION&quot;' />
              <groupfilter function='member' level='[none:symbol:nk]' member='&quot;ZTS&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1r5vhes128chte10doul40fm7qtp].[none:date:qk]</column>
            <column>[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]</column>
            <column>[federated.1r5vhes128chte10doul40fm7qtp].[none:symbol:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='stroke-size' value='0' />
            <format attr='line-visibility' value='off' />
            <format attr='tick-color' value='#00000000' />
            <format attr='title' class='0' field='[federated.1r5vhes128chte10doul40fm7qtp].[usr:Calculation_1496039543192064001:qk]' scope='rows' value='' />
            <format attr='title' class='0' field='[federated.1r5vhes128chte10doul40fm7qtp].[none:date:qk]' scope='cols' value='' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1r5vhes128chte10doul40fm7qtp].[usr:Calculation_1496039543192064001:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='border-width' data-class='total' value='0' />
            <format attr='border-style' data-class='total' value='none' />
          </style-rule>
          <style-rule element='dropline'>
            <format attr='stroke-size' value='0' />
            <format attr='line-visibility' value='off' />
          </style-rule>
          <style-rule element='refline'>
            <format attr='stroke-color' id='refline0' value='#000000' />
            <format attr='stroke-size' value='0' />
            <format attr='line-visibility' value='off' />
          </style-rule>
          <style-rule element='zeroline'>
            <format attr='stroke-size' value='0' />
            <format attr='line-visibility' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' />
            </encodings>
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
              <style-rule element='trendline'>
                <format attr='stroke-size' value='0' />
                <format attr='line-visibility' value='off' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1r5vhes128chte10doul40fm7qtp].[usr:Calculation_1496039543192064001:qk]</rows>
        <cols>[federated.1r5vhes128chte10doul40fm7qtp].[none:date:qk]</cols>
      </table>
      <simple-id uuid='{553C01BE-008F-4269-A31D-DD76808A6BB2}' />
    </worksheet>
    <worksheet name='stock trend'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#000000' fontname='Benton Sans Book' fontsize='18'>Yearly Stock Trends by Sector</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Stockcompanies.csv+ (Multiple Connections)' name='federated.1r5vhes128chte10doul40fm7qtp' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='Start date' datatype='date' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='#2015-08-22#'>
              <calculation class='tableau' formula='#2015-08-22#' />
              <range max='#2016-12-30#' min='#2010-01-04#' />
            </column>
            <column caption='End date' datatype='date' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='#2014-03-16#'>
              <calculation class='tableau' formula='#2014-03-16#' />
              <range max='#2016-12-30#' min='#2010-01-04#' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.1r5vhes128chte10doul40fm7qtp'>
            <column aggregation='Sum' caption='Period' datatype='integer' name='[Calculation_517351049229258753]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='IF [date]&gt;= [Parameters].[Parameter 2] AND [date]&lt;= [Parameters].[Parameter 3] THEN 1 ELSE 0&#13;&#10;END' />
            </column>
            <column datatype='string' name='[Sector]' role='dimension' type='nominal' />
            <column caption='Date' datatype='date' name='[date]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_517351049229258753]' derivation='None' name='[none:Calculation_517351049229258753:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Sector]' derivation='None' name='[none:Sector:nk]' pivot='key' type='nominal' />
            <column-instance column='[volume]' derivation='Sum' name='[sum:volume:qk]' pivot='key' type='quantitative' />
            <column caption='Volume' datatype='integer' name='[volume]' role='measure' type='quantitative' />
            <column-instance column='[date]' derivation='Year' name='[yr:date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1r5vhes128chte10doul40fm7qtp].[none:Calculation_517351049229258753:ok]'>
            <groupfilter function='member' level='[none:Calculation_517351049229258753:ok]' member='0' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Consumer Discretionary&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Consumer Staples&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Energy&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Financials&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Health Care&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Industrials&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Information Technology&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Materials&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Real Estate&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Telecommunications Services&quot;' />
              <groupfilter function='member' level='[none:Sector:nk]' member='&quot;Utilities&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1r5vhes128chte10doul40fm7qtp].[none:Calculation_517351049229258753:ok]</column>
            <column>[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]' />
              <text column='[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='has-stroke' value='false' />
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]</rows>
        <cols>[federated.1r5vhes128chte10doul40fm7qtp].[yr:date:ok]</cols>
      </table>
      <simple-id uuid='{B1D16928-1F6E-4873-9553-8C2B59AC9190}' />
    </worksheet>
    <worksheet name='summary'>
      <layout-options>
        <title>
          <formatted-text />
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Stockcompanies.csv+ (Multiple Connections)' name='federated.1r5vhes128chte10doul40fm7qtp' />
          </datasources>
          <datasource-dependencies datasource='federated.1r5vhes128chte10doul40fm7qtp'>
            <column-instance column='[close]' derivation='Avg' name='[avg:close:qk]' pivot='key' type='quantitative' />
            <column-instance column='[high]' derivation='Avg' name='[avg:high:qk]' pivot='key' type='quantitative' />
            <column-instance column='[low]' derivation='Avg' name='[avg:low:qk]' pivot='key' type='quantitative' />
            <column-instance column='[open]' derivation='Avg' name='[avg:open:qk]' pivot='key' type='quantitative' />
            <column-instance column='[volume]' derivation='Avg' name='[avg:volume:qk]' pivot='key' type='quantitative' />
            <column caption='Close' datatype='real' name='[close]' role='measure' type='quantitative' />
            <column caption='High' datatype='real' name='[high]' role='measure' type='quantitative' />
            <column caption='Low' datatype='real' name='[low]' role='measure' type='quantitative' />
            <column caption='Open' datatype='real' name='[open]' role='measure' type='quantitative' />
            <column-instance column='[low]' derivation='Sum' name='[sum:low:qk]' pivot='key' type='quantitative' />
            <column caption='Volume' datatype='integer' name='[volume]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1r5vhes128chte10doul40fm7qtp].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:close:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:high:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:open:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:low:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:volume:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1r5vhes128chte10doul40fm7qtp].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:close:qk]&quot;</bucket>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:high:qk]&quot;</bucket>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[avg:open:qk]&quot;</bucket>
              <bucket>&quot;[federated.1r5vhes128chte10doul40fm7qtp].[sum:low:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1r5vhes128chte10doul40fm7qtp].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1r5vhes128chte10doul40fm7qtp].[:Measure Names]' value='224' />
            <format attr='height' value='84' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.1r5vhes128chte10doul40fm7qtp].[:Measure Names]' value='false' />
          </style-rule>
          <style-rule element='pane'>
            <format attr='background-color' value='#2e6386' />
          </style-rule>
          <style-rule element='table'>
            <format attr='background-color' value='#2e6386' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='color' value='#ffffff' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='stroke-size' scope='rows' value='0' />
            <format attr='line-visibility' scope='rows' value='off' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1r5vhes128chte10doul40fm7qtp].[Multiple Values]' />
              <text column='[federated.1r5vhes128chte10doul40fm7qtp].[:Measure Names]' />
            </encodings>
            <customized-label>
              <formatted-text>
                <run bold='true' fontsize='24'><![CDATA[<[federated.1r5vhes128chte10doul40fm7qtp].[Multiple Values]>]]></run>
                <run>Æ&#10;</run>
                <run fontsize='12'><![CDATA[<[federated.1r5vhes128chte10doul40fm7qtp].[:Measure Names]>]]></run>
              </formatted-text>
            </customized-label>
            <style>
              <style-rule element='cell'>
                <format attr='text-align' value='center' />
                <format attr='vertical-align' value='center' />
              </style-rule>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
                <format attr='minheight' value='-1' />
                <format attr='maxheight' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols>[federated.1r5vhes128chte10doul40fm7qtp].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{299A343E-FF67-4B8A-81A0-25AB01D27048}' />
    </worksheet>
    <worksheet name='volume'>
      <layout-options>
        <title>
          <formatted-text>
            <run bold='true' fontcolor='#000000' fontname='Benton Sans Book' fontsize='18'>Total Trading Volume by Sector</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Stockcompanies.csv+ (Multiple Connections)' name='federated.1r5vhes128chte10doul40fm7qtp' />
          </datasources>
          <datasource-dependencies datasource='federated.1r5vhes128chte10doul40fm7qtp'>
            <column caption='Average Closing Price' datatype='real' name='[Calculation_1496039543192064001]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='AVG([close])' />
            </column>
            <column datatype='string' name='[Sector]' role='dimension' type='nominal' />
            <column-instance column='[Sector]' derivation='Attribute' name='[attr:Sector:nk]' pivot='key' type='nominal' />
            <column caption='Close' datatype='real' name='[close]' role='measure' type='quantitative' />
            <column-instance column='[Sector]' derivation='None' name='[none:Sector:nk]' pivot='key' type='nominal' />
            <column-instance column='[volume]' derivation='Sum' name='[sum:volume:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1496039543192064001]' derivation='User' name='[usr:Calculation_1496039543192064001:qk]' pivot='key' type='quantitative' />
            <column caption='Volume' datatype='integer' name='[volume]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1r5vhes128chte10doul40fm7qtp].[attr:Sector:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Consumer Discretionary&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Consumer Staples&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Energy&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Financials&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Health Care&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Industrials&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Information Technology&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Materials&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Real Estate&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Telecommunications Services&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='&quot;Utilities&quot;' />
              <groupfilter function='member' level='[attr:Sector:nk]' member='%many-values%' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.1r5vhes128chte10doul40fm7qtp].[attr:Sector:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='display' class='0' field='[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]' scope='rows' value='false' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' value='75' />
          </style-rule>
          <style-rule element='label'>
            <format attr='display' field='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' value='false' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' />
              <text column='[federated.1r5vhes128chte10doul40fm7qtp].[usr:Calculation_1496039543192064001:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]</rows>
        <cols>[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]</cols>
      </table>
      <simple-id uuid='{FA138F70-7AA0-4B16-B9B7-A5E4F93211C9}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='700' maxwidth='1500' minheight='700' minwidth='1500' sizing-mode='fixed' />
      <datasources>
        <datasource name='Parameters' />
        <datasource caption='Stockcompanies.csv+ (Multiple Connections)' name='federated.1r5vhes128chte10doul40fm7qtp' />
      </datasources>
      <datasource-dependencies datasource='Parameters'>
        <column caption='Start date' datatype='date' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='#2015-08-22#'>
          <calculation class='tableau' formula='#2015-08-22#' />
          <range max='#2016-12-30#' min='#2010-01-04#' />
        </column>
        <column caption='End date' datatype='date' name='[Parameter 3]' param-domain-type='range' role='measure' type='quantitative' value='#2014-03-16#'>
          <calculation class='tableau' formula='#2014-03-16#' />
          <range max='#2016-12-30#' min='#2010-01-04#' />
        </column>
      </datasource-dependencies>
      <datasource-dependencies datasource='federated.1r5vhes128chte10doul40fm7qtp'>
        <column datatype='string' name='[Sector]' role='dimension' type='nominal' />
        <column-instance column='[Sector]' derivation='None' name='[none:Sector:nk]' pivot='key' type='nominal' />
      </datasource-dependencies>
      <zones>
        <zone forceUpdate='true' h='12143' id='3' type-v2='text' w='25267' x='267' y='857'>
          <formatted-text>
            <run bold='true' fontcolor='#ffffff' fontsize='18'>Stock Market Analysis</run>
          </formatted-text>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='background-color' value='#2e6386' />
          </zone-style>
        </zone>
        <zone h='39571' id='4' name='volume' w='37200' x='26000' y='18143' />
        <zone h='39571' id='6' name='price' w='36267' x='63467' y='18714' />
        <zone h='14571' id='8' name='summary' w='74933' x='25333' y='-1286' />
        <zone h='40000' id='9' name='stock trend' w='73667' x='25667' y='59143' />
        <zone h='88286' id='13' param='vert' type-v2='layout-flow' w='24667' x='0' y='12429'>
          <zone h='27785' id='5' name='volume' pane-specification-id='0' param='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' type-v2='color' w='24667' x='0' y='12429'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='27785' id='7' name='price' param='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' type-v2='filter' w='24667' x='0' y='40214'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='11286' id='12' mode='slider' param='[Parameters].[Parameter 3]' type-v2='paramctrl' w='24667' x='0' y='67999'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='11286' id='11' mode='slider' param='[Parameters].[Parameter 2]' type-v2='paramctrl' w='24667' x='0' y='79285'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone fixed-size='63' h='10144' id='10' is-fixed='true' name='stock trend' pane-specification-id='2' param='[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]' type-v2='color' w='24667' x='0' y='90571'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1400' minheight='1400' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='17' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='97714' id='16' param='vert' type-v2='layout-flow' w='98934' x='533' y='1143'>
                <zone fixed-size='102' h='14571' id='8' is-fixed='true' name='summary' w='74933' x='25333' y='-1286'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone forceUpdate='true' h='12143' id='3' type-v2='text' w='25267' x='267' y='857'>
                  <formatted-text>
                    <run bold='true' fontcolor='#ffffff' fontsize='18'>Stock Market Analysis</run>
                  </formatted-text>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                    <format attr='background-color' value='#2e6386' />
                  </zone-style>
                </zone>
                <zone fixed-size='277' h='39571' id='4' is-fixed='true' name='volume' w='37200' x='26000' y='18143'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='27785' id='5' name='volume' pane-specification-id='0' param='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' type-v2='color' w='24667' x='0' y='12429'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='27785' id='7' mode='checkdropdown' name='price' param='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' type-v2='filter' w='24667' x='0' y='40214'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='277' h='39571' id='6' is-fixed='true' name='price' w='36267' x='63467' y='18714'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='40000' id='9' is-fixed='true' name='stock trend' w='73667' x='25667' y='59143'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='63' h='10144' id='10' name='stock trend' pane-specification-id='2' param='[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]' type-v2='color' w='24667' x='0' y='90571'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='11286' id='12' mode='slider' param='[Parameters].[Parameter 3]' type-v2='paramctrl' w='24667' x='0' y='67999'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='11286' id='11' mode='slider' param='[Parameters].[Parameter 2]' type-v2='paramctrl' w='24667' x='0' y='79285'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{130F3FD3-F482-4D21-B2ED-AD1DAE999D56}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='volume'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;Consumer Discretionary&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[attr:Sector:nk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Headquarter:nk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Security:nk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Sub_Industry:nk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Ticker_symbol:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{560F7E01-9D56-42B0-83E8-A98CE5C574E6}' />
    </window>
    <window class='worksheet' name='price'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' type='filter' />
            <card pane-specification-id='1' param='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Sub_Industry:nk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Ticker_symbol:nk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:date:qk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:symbol:nk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[sum:Calculation_1496039543207063554:qk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[sum:close:qk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[tyr:date:ok]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[usr:Calculation_1496039543209070597:ok]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[usr:Calculation_1496039543209070597:qk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{56C1AB6C-498B-424D-98F8-EE5007CD2B20}' />
    </window>
    <window class='worksheet' name='stock trend'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='slider' param='[Parameters].[Parameter 2]' type='parameter' />
            <card mode='slider' param='[Parameters].[Parameter 3]' type='parameter' />
            <card pane-specification-id='2' param='[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Calculation_517351049229258753:ok]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[none:Headquarter:nk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[sum:volume:qk]</field>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[yr:date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{07ED13E0-2EFA-473C-B4A6-D510A57BB193}' />
    </window>
    <window class='worksheet' name='summary'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1r5vhes128chte10doul40fm7qtp].[:Measure Names]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{949CF255-DA47-4319-A7EC-6FD8ADDF8924}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='price'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='stock trend' />
        <viewpoint name='summary' />
        <viewpoint name='volume'>
          <zoom type='entire-view' />
          <highlight field='[federated.1r5vhes128chte10doul40fm7qtp].[none:Sector:nk]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{25956BD8-201E-4A07-AC44-D943EEA85786}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='price' width='192'>
      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
      5tcMZTn+TLUAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='stock trend' width='192'>
      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
    </thumbnail>
    <thumbnail height='100' name='summary' width='192'>
      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
      RU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='volume' width='192'>
      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
      INEYABLt/z8qJ3gAVfF8AAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
